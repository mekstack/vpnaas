/**
 * @fileoverview gRPC-Web generated client stub for vpnaas
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: vpnaas.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as vpnaas_pb from './vpnaas_pb';


export class KeysClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorget_all_peers = new grpcWeb.MethodDescriptor(
    '/vpnaas.Keys/get_all_peers',
    grpcWeb.MethodType.UNARY,
    vpnaas_pb.Empty,
    vpnaas_pb.Peers,
    (request: vpnaas_pb.Empty) => {
      return request.serializeBinary();
    },
    vpnaas_pb.Peers.deserializeBinary
  );

  get_all_peers(
    request: vpnaas_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<vpnaas_pb.Peers>;

  get_all_peers(
    request: vpnaas_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vpnaas_pb.Peers) => void): grpcWeb.ClientReadableStream<vpnaas_pb.Peers>;

  get_all_peers(
    request: vpnaas_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vpnaas_pb.Peers) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vpnaas.Keys/get_all_peers',
        request,
        metadata || {},
        this.methodDescriptorget_all_peers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vpnaas.Keys/get_all_peers',
    request,
    metadata || {},
    this.methodDescriptorget_all_peers);
  }

  methodDescriptorget_peer = new grpcWeb.MethodDescriptor(
    '/vpnaas.Keys/get_peer',
    grpcWeb.MethodType.UNARY,
    vpnaas_pb.User,
    vpnaas_pb.Peer,
    (request: vpnaas_pb.User) => {
      return request.serializeBinary();
    },
    vpnaas_pb.Peer.deserializeBinary
  );

  get_peer(
    request: vpnaas_pb.User,
    metadata: grpcWeb.Metadata | null): Promise<vpnaas_pb.Peer>;

  get_peer(
    request: vpnaas_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vpnaas_pb.Peer) => void): grpcWeb.ClientReadableStream<vpnaas_pb.Peer>;

  get_peer(
    request: vpnaas_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vpnaas_pb.Peer) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vpnaas.Keys/get_peer',
        request,
        metadata || {},
        this.methodDescriptorget_peer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vpnaas.Keys/get_peer',
    request,
    metadata || {},
    this.methodDescriptorget_peer);
  }

  methodDescriptorset_pubkey = new grpcWeb.MethodDescriptor(
    '/vpnaas.Keys/set_pubkey',
    grpcWeb.MethodType.UNARY,
    vpnaas_pb.UserPubkey,
    vpnaas_pb.Success,
    (request: vpnaas_pb.UserPubkey) => {
      return request.serializeBinary();
    },
    vpnaas_pb.Success.deserializeBinary
  );

  set_pubkey(
    request: vpnaas_pb.UserPubkey,
    metadata: grpcWeb.Metadata | null): Promise<vpnaas_pb.Success>;

  set_pubkey(
    request: vpnaas_pb.UserPubkey,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vpnaas_pb.Success) => void): grpcWeb.ClientReadableStream<vpnaas_pb.Success>;

  set_pubkey(
    request: vpnaas_pb.UserPubkey,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vpnaas_pb.Success) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vpnaas.Keys/set_pubkey',
        request,
        metadata || {},
        this.methodDescriptorset_pubkey,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vpnaas.Keys/set_pubkey',
    request,
    metadata || {},
    this.methodDescriptorset_pubkey);
  }

}

export class WgClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorpush_peer_update = new grpcWeb.MethodDescriptor(
    '/vpnaas.Wg/push_peer_update',
    grpcWeb.MethodType.UNARY,
    vpnaas_pb.Peer,
    vpnaas_pb.Success,
    (request: vpnaas_pb.Peer) => {
      return request.serializeBinary();
    },
    vpnaas_pb.Success.deserializeBinary
  );

  push_peer_update(
    request: vpnaas_pb.Peer,
    metadata: grpcWeb.Metadata | null): Promise<vpnaas_pb.Success>;

  push_peer_update(
    request: vpnaas_pb.Peer,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vpnaas_pb.Success) => void): grpcWeb.ClientReadableStream<vpnaas_pb.Success>;

  push_peer_update(
    request: vpnaas_pb.Peer,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vpnaas_pb.Success) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vpnaas.Wg/push_peer_update',
        request,
        metadata || {},
        this.methodDescriptorpush_peer_update,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vpnaas.Wg/push_peer_update',
    request,
    metadata || {},
    this.methodDescriptorpush_peer_update);
  }

}

export class ConfusClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorget_config = new grpcWeb.MethodDescriptor(
    '/vpnaas.Confus/get_config',
    grpcWeb.MethodType.UNARY,
    vpnaas_pb.User,
    vpnaas_pb.UserConfig,
    (request: vpnaas_pb.User) => {
      return request.serializeBinary();
    },
    vpnaas_pb.UserConfig.deserializeBinary
  );

  get_config(
    request: vpnaas_pb.User,
    metadata: grpcWeb.Metadata | null): Promise<vpnaas_pb.UserConfig>;

  get_config(
    request: vpnaas_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vpnaas_pb.UserConfig) => void): grpcWeb.ClientReadableStream<vpnaas_pb.UserConfig>;

  get_config(
    request: vpnaas_pb.User,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vpnaas_pb.UserConfig) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vpnaas.Confus/get_config',
        request,
        metadata || {},
        this.methodDescriptorget_config,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vpnaas.Confus/get_config',
    request,
    metadata || {},
    this.methodDescriptorget_config);
  }

}

